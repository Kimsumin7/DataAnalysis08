# 데이터 로드
data(EuStockMarkets)
# 상관관계 행렬 계산
cor_matrix <- cor(EuStockMarkets)
# 상관관계 행렬을 데이터프레임으로 변환
cor_data <- as.data.frame(as.table(cor_matrix))
# 상관관계 행렬에서 상삼각행렬 부분만 추출
cor_data <- cor_data[upper.tri(cor_matrix, diag = TRUE), ]
# 상관관계 행렬 시각화
library(ggplot2)
ggplot(data = cor_data, aes(x=Var2, y=Var1, fill=Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Freq)), size = 4, color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
coord_fixed() +
ggtitle("Correlation Matrix of EuStockMarkets") +
scale_x_discrete(limits = rev(levels(cor_data$Var2)))
# 데이터 로드
data(EuStockMarkets)
# 상관관계 행렬 계산
cor_matrix <- cor(EuStockMarkets)
# 상관관계 행렬을 데이터프레임으로 변환
cor_data <- as.data.frame(as.table(cor_matrix))
# 상관관계 행렬에서 하삼각행렬 부분만 추출
cor_data <- cor_data[lower.tri(cor_matrix, diag = TRUE), ]
# 상관관계 행렬 시각화
library(ggplot2)
ggplot(data = cor_data, aes(x=Var1, y=Var2, fill=Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Freq)), size = 4, color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
coord_fixed() +
ggtitle("Correlation Matrix of EuStockMarkets")
# 데이터 로드
data(EuStockMarkets)
# 상관관계 행렬 계산
cor_matrix <- cor(EuStockMarkets)
# 상관관계 행렬을 데이터프레임으로 변환
cor_data <- as.data.frame(as.table(cor_matrix))
# 상관관계 행렬에서 하삼각행렬 부분만 추출
cor_data <- cor_data[lower.tri(cor_matrix, diag = TRUE), ]
# y축 순서를 반대로 변경
cor_data$Var1 <- factor(cor_data$Var1, levels = rev(levels(cor_data$Var1)))
# 상관관계 행렬 시각화
library(ggplot2)
ggplot(data = cor_data, aes(x=Var1, y=Var2, fill=Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Freq)), size = 4, color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
coord_fixed() +
ggtitle("Correlation Matrix of EuStockMarkets")
# 데이터 로드
data(EuStockMarkets)
# 상관관계 행렬 계산
cor_matrix <- cor(EuStockMarkets)
# 상관관계 행렬을 데이터프레임으로 변환
cor_data <- as.data.frame(as.table(cor_matrix))
# 상관관계 행렬에서 하삼각행렬 부분만 추출
cor_data <- cor_data[lower.tri(cor_matrix, diag = TRUE), ]
# 상관관계 행렬 시각화
library(ggplot2)
ggplot(data = cor_data, aes(x=Var1, y=Var2, fill=Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Freq)), size = 4, color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
coord_fixed() +
ggtitle("Correlation Matrix of EuStockMarkets")
# 데이터 로드
data(EuStockMarkets)
# 상관관계 행렬 계산
cor_matrix <- cor(EuStockMarkets)
# 상관관계 행렬을 데이터프레임으로 변환
cor_data <- as.data.frame(as.table(cor_matrix))
# 상관관계 행렬에서 하삼각행렬 부분만 추출
cor_data <- cor_data[lower.tri(cor_matrix, diag = TRUE), ]
# y축 순서를 반대로 변경
cor_data$Var2 <- factor(cor_data$Var2, levels = rev(levels(cor_data$Var2)))
# 상관관계 행렬 시각화
library(ggplot2)
ggplot(data = cor_data, aes(x=Var1, y=Var2, fill=Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Freq)), size = 4, color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
coord_fixed() +
ggtitle("Correlation Matrix of EuStockMarkets")
# 홍길동의 점수, 평균, 표준편차, 전체 학생 수 정의
hong_score <- 92
mean_score <- 80
sd_score <- 7
total_students <- 350
# Z-값 계산
z_value <- (hong_score - mean_score) / sd_score
# Z-값을 이용하여 누적 백분위 계산
percentile <- pnorm(z_value)
# 등수 계산
rank <- total_students * (1 - percentile) + 1
# 결과 출력
cat("홍길동의 Z-값:", z_value, "\n")
cat("홍길동의 백분위:", percentile * 100, "%\n")
cat("홍길동의 예상 등수:", floor(rank), "등\n")
# 주어진 데이터 프레임 생성
data <- data.frame(
종업원 = 1:20,
연봉 = c(325, 275, 350, 400, 325, 425, 375, 475, 400, 575, 425, 450, 700, 525, 600, 750, 650, 775, 675, 825),
연수 = c(2, 4, 4, 6, 7, 8, 10, 10, 12, 12, 14, 16, 17, 18, 20, 20, 22, 23, 24, 26),
학력 = c(1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1)
)
# 다중회귀분석 실행
model <- lm(연봉 ~ 연수 + 학력, data=data)
# 회귀분석 요약 출력
summary(model)
# 분산 분석 출력
anova(model)
input <- mtcars[,c("mpg", "idsp", "hp", "wt")]
print(head(input))
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
model <- Im(mpg!disp+hp+wp, data = input)
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
model <- Im(mpg~disp+hp+wp, data = input)
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
model <- lm(mpg~disp+hp+wp, data = input)
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 필요한 패키지 설치 (한 번만 설치하면 됨)
install.packages("car")
# 패키지 로드
library(car)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
vif_values <- vif(model)
print(vif_values)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
vif_values <- vif(model)
print(vif_values)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 독립 변수들 간의 상관계수 계산
cor_matrix <- cor(input[, -1])  # 첫 번째 열(mpg)을 제외하고 상관계수 계산
print(cor_matrix)
# VIF 계산을 위해 car 패키지 로드
install.packages("car")
library(car)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
# CRAN 미러 설정
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# 필요한 패키지 설치
install.packages("car")
# 패키지 로드
library(car)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 독립 변수들 간의 상관계수 계산
cor_matrix <- cor(input[, -1])  # 첫 번째 열(mpg)을 제외하고 상관계수 계산
print(cor_matrix)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
print(vif_values)
# 패키지 로드
library(car)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 독립 변수들 간의 상관계수 계산
cor_matrix <- cor(input[, -1])  # 첫 번째 열(mpg)을 제외하고 상관계수 계산
print(cor_matrix)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
# 패키지 로드
library(car)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 독립 변수들 간의 상관계수 계산
cor_matrix <- cor(input[, -1])  # 첫 번째 열(mpg)을 제외하고 상관계수 계산
print(cor_matrix)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
# CRAN 미러 설정
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# 필요한 패키지 설치
install.packages("car")
# 패키지 로드
library(car)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# 독립 변수들 간의 상관계수 계산
cor_matrix <- cor(input[, -1])  # 첫 번째 열(mpg)을 제외하고 상관계수 계산
print(cor_matrix)
# VIF 계산
vif_values <- vif(model)
print(vif_values)
# mtcars 데이터셋 로드 (기본적으로 R에 내장되어 있음)
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 결과 출력
print(head(input))
# 다중회귀분석 실행
model <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model)
# 모델 출력
print(model)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
