# 필요한 패키지 설치
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(multcomp)
# 엑셀 파일 불러오기
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/PlantGrowth.xlsx"
plant_growth <- read_excel(file_path)
# 데이터 확인
head(plant_growth)
# ANOVA 수행
anova_result <- aov(Growth ~ Crop, data = plant_growth)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
# 필요한 패키지 설치
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(multcomp)
# 엑셀 파일 불러오기
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/PlantGrowth.xlsx"
plant_growth <- read_excel(file_path)
# 데이터 확인
head(plant_growth)
# ANOVA 수행
anova_result <- aov(Growth ~ Crop, data = plant_growth)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
# 필요한 패키지 설치
install.packages("tidyverse")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(tidyverse)
library(car)
library(multcomp)
# 데이터프레임 생성
data <- data.frame(
weight = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14,
4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69,
6.31, 5.12, 5.54, 5.5, 5.37, 5.29, 4.92, 6.15, 5.8, 5.26),
group = rep(c("C", "T1", "T2"), each = 10)
)
# 데이터 확인
head(data)
# ANOVA 수행
anova_result <- aov(weight ~ group, data = data)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# 필요한 패키지 설치 및 로드
install.packages("ggplot2")
library(ggplot2)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# 예측 값 및 실제 값 데이터 프레임 생성
predicted_data <- data.frame(
wt = mtcars$wt,
hp = mtcars$hp,
am = mtcars$am,
predicted_prob = predict(logistic_model, type = "response")
)
# 예측 결과를 0 또는 1로 변환
predicted_data$predicted_am <- ifelse(predicted_data$predicted_prob > 0.5, 1, 0)
predicted_data$predicted_am <- as.factor(predicted_data$predicted_am)
# wt와 am의 관계를 시각화
plot_wt <- ggplot(predicted_data, aes(x = wt, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of wt vs am",
x = "Weight (wt)",
y = "Predicted Probability of am")
# hp와 am의 관계를 시각화
plot_hp <- ggplot(predicted_data, aes(x = hp, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of hp vs am",
x = "Horsepower (hp)",
y = "Predicted Probability of am")
# 플롯 출력
print(plot_wt)
print(plot_hp)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# 필요한 패키지 설치 및 로드
install.packages("ggplot2")
library(ggplot2)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# exp(B) 값 계산
exp_coefficients <- exp(coef(logistic_model))
exp_coefficients
# 예측 값 및 실제 값 데이터 프레임 생성
predicted_data <- data.frame(
wt = mtcars$wt,
hp = mtcars$hp,
am = mtcars$am,
predicted_prob = predict(logistic_model, type = "response")
)
# 예측 결과를 0 또는 1로 변환
predicted_data$predicted_am <- ifelse(predicted_data$predicted_prob > 0.5, 1, 0)
predicted_data$predicted_am <- as.factor(predicted_data$predicted_am)
# 예측값 테이블 출력
table(predicted_data$am, predicted_data$predicted_am)
# wt와 am의 관계를 시각화
plot_wt <- ggplot(predicted_data, aes(x = wt, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of wt vs am",
x = "Weight (wt)",
y = "Predicted Probability of am")
# hp와 am의 관계를 시각화
plot_hp <- ggplot(predicted_data, aes(x = hp, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of hp vs am",
x = "Horsepower (hp)",
y = "Predicted Probability of am")
# 플롯 출력
print(plot_wt)
print(plot_hp)
install.packages("ggplot2")
# 필요한 패키지 설치 및 로드
install.packages("ggplot2")
library(ggplot2)
# mtcars 데이터셋 로드
data(mtcars)
# 종속 변수인 am을 팩터로 변환
mtcars$am <- as.factor(mtcars$am)
# 로지스틱 회귀 모델 피팅
logistic_model <- glm(am ~ wt + hp, data = mtcars, family = binomial)
# 모델 요약 출력
summary(logistic_model)
# exp(B) 값 계산
exp_coefficients <- exp(coef(logistic_model))
exp_coefficients
# 예측 값 및 실제 값 데이터 프레임 생성
predicted_data <- data.frame(
wt = mtcars$wt,
hp = mtcars$hp,
am = mtcars$am,
predicted_prob = predict(logistic_model, type = "response")
)
# 예측 결과를 0 또는 1로 변환
predicted_data$predicted_am <- ifelse(predicted_data$predicted_prob > 0.5, 1, 0)
predicted_data$predicted_am <- as.factor(predicted_data$predicted_am)
# 예측값 테이블 출력
table(predicted_data$am, predicted_data$predicted_am)
# wt와 am의 관계를 시각화
plot_wt <- ggplot(predicted_data, aes(x = wt, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of wt vs am",
x = "Weight (wt)",
y = "Predicted Probability of am")
# hp와 am의 관계를 시각화
plot_hp <- ggplot(predicted_data, aes(x = hp, y = predicted_prob, color = am)) +
geom_point(aes(shape = am), size = 2) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression of hp vs am",
x = "Horsepower (hp)",
y = "Predicted Probability of am")
# 플롯 출력
print(plot_wt)
print(plot_hp)
install.packages("ggplot2")
# 필요한 패키지 설치 및 로드
install.packages("readxl")    # 엑셀 파일 불러오기 위한 패키지
install.packages("car")       # 다중공선성 검사를 위한 패키지
install.packages("caret")     # 원 핫 인코딩을 위한 패키지
library(readxl)
library(car)
library(caret)
# 엑셀 데이터 불러오기 (파일명 및 경로는 적절히 변경하세요)
data <- read_excel("C:\Users\409-23\Documents\카카오톡 받은 파일\선문대_실습용 데이터.csv")
# 원 핫 인코딩 수행
dummy_vars <- dummyVars("~ .", data = data)
data_transformed <- data.frame(predict(dummy_vars, newdata = data))
# 독립계수 상관분석
cor_matrix <- cor(data_transformed[, !(names(data_transformed) %in% "전반적_만족")])
print(cor_matrix)
# 전반적 만족에 미치는 영향 요인 검정 (다중회귀분석)
model <- lm(전반적_만족 ~ ., data = data_transformed)
summary(model)
# 다중공선성 확인 (VIF)
vif_values <- vif(model)
print(vif_values)
# 다중공선성 문제 있는지 확인 (일반적으로 VIF > 10이면 다중공선성 문제 의심)
if(any(vif_values > 10)) {
cat("주의: 다중공선성 문제가 있는 변수들이 있습니다.\n")
} else {
cat("다중공선성 문제가 없습니다.\n")
}
# 필요한 패키지 설치 및 로드
install.packages("readxl")    # 엑셀 파일 불러오기 위한 패키지
install.packages("car")       # 다중공선성 검사를 위한 패키지
install.packages("caret")     # 원 핫 인코딩을 위한 패키지
library(readxl)
library(car)
library(caret)
# 엑셀 데이터 불러오기 (파일명 및 경로는 적절히 변경하세요)
data <- read_excel("C:\Users\409-23\Documents\카카오톡 받은 파일\선문대_실습용 데이터.csv")
# 원 핫 인코딩 수행
dummy_vars <- dummyVars("~ .", data = data)
data_transformed <- data.frame(predict(dummy_vars, newdata = data))
# 독립계수 상관분석
cor_matrix <- cor(data_transformed[, !(names(data_transformed) %in% "전반적_만족")])
print(cor_matrix)
# 전반적 만족에 미치는 영향 요인 검정 (다중회귀분석)
model <- lm(전반적_만족 ~ ., data = data_transformed)
summary(model)
# 다중공선성 확인 (VIF)
vif_values <- vif(model)
print(vif_values)
# 다중공선성 문제 있는지 확인 (일반적으로 VIF > 10이면 다중공선성 문제 의심)
if(any(vif_values > 10)) {
cat("주의: 다중공선성 문제가 있는 변수들이 있습니다.\n")
} else {
cat("다중공선성 문제가 없습니다.\n")
}
install.packages("readxl")
library(dplyr)
file_path <- "C:\Users\409-23\Documents\카카오톡 받은 파일\Overall_satification.xlsx"
data <- read_excel(file_path)
summary(data)
model <- lm(Ove_S ~ . , data = data)
summary(model)
library(dplyr)
file_path <- "C:\Users\409-23\Documents\카카오톡 받은 파일\Overall_satification.xlsx"
data <- read_excel(file_path)
summary(data)
model <- lm(Ove_S ~ . , data = data)
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:\Users\409-23\Documents\카카오톡 받은 파일\선문대_실습용 데이터 (2).xlsx"
# 데이터 불러오기
data <- read_excel(file_path)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path, sheet = 2)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path, sheet = 1)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 데이터 요약
summary(data)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path, sheet = 2)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 패키지 로드
library(dplyr)
library(readxl)
# 파일 경로 수정
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/Overall_satification.xlsx"
# 데이터 불러오기
data <- read_excel(file_path, sheet = 1)
# 데이터 요약
summary(data)
# Ove_S 변수 확인
if(!"Ove_S" %in% colnames(data)) {
stop("Ove_S 변수가 데이터에 없습니다.")
}
# 회귀 분석 모델 생성
model <- lm(Ove_S ~ ., data = data)
# 모델 요약
summary(model)
# 필요한 패키지 로드
library(datasets)
library(ggplot2)
# 데이터 로드
data("USArrests")
# 데이터 확인
head(USArrests)
summary(USArrests)
# 데이터 스케일링 (평균을 0으로 하고 분산을 1로 맞춤)
scaled_data <- scale(USArrests)
# 주성분 분석 수행
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# 주성분 분석 결과 요약
summary(pca_result)
# 주성분 로딩
pca_result$rotation
# 주성분 점수
pca_result$x
# Scree plot
screeplot(pca_result, type = "lines", main = "Scree Plot")
# 주성분 분석 결과 시각화 (ggplot2 사용)
# 주성분 점수 데이터프레임 생성
pca_data <- as.data.frame(pca_result$x)
pca_data$State <- rownames(USArrests)
# 주성분 분석 시각화 (PC1과 PC2)
ggplot(pca_data, aes(x = PC1, y = PC2, label = State)) +
geom_text(aes(color = State)) +
ggtitle("PCA of USArrests Data") +
theme_minimal()
# 주성분 로딩 시각화
loading_data <- as.data.frame(pca_result$rotation)
loading_data$Variable <- rownames(loading_data)
ggplot(loading_data, aes(x = PC1, y = PC2, label = Variable)) +
geom_text(aes(color = Variable)) +
geom_segment(aes(xend = PC1, yend = PC2), x = 0, y = 0, arrow = arrow(length = unit(0.3, "cm"))) +
ggtitle("PCA Loadings Plot of USArrests Data") +
theme_minimal()
FA <- princomp(USArrests, cor=T)
summary(FA)
FA$scale
FA$loadings
plot(FA$scores[,1], FA$scores[,2], xlab="z1", ylab="z2")
biplot(FA, cex=0.7)
abline(v=0, h=0, col="gray")
# 필요한 패키지 로드
library(datasets)
library(ggplot2)
# 데이터 로드
data("USArrests")
# 주성분 분석 수행
FA <- princomp(USArrests, cor = TRUE)
# 주성분 분석 결과 요약
summary(FA)
# 주성분 로딩 확인
FA$scale
FA$loadings
# 기본 plot 크기 조정
plot(FA$scores[, 1], FA$scores[, 2], xlab = "z1", ylab = "z2", cex = 1.5, pch = 19)
biplot(FA, cex = 1.2, col = c("black", "red"))
abline(v = 0, h = 0, col = "gray")
# ggplot2로 주성분 분석 시각화
# 주성분 점수 데이터프레임 생성
pca_data <- as.data.frame(FA$scores)
pca_data$State <- rownames(USArrests)
# 주성분 로딩 데이터프레임 생성
loading_data <- as.data.frame(FA$loadings[, 1:2])
loading_data$Variable <- rownames(loading_data)
# ggplot2를 사용한 주성분 분석 시각화
ggplot() +
geom_point(data = pca_data, aes(x = Comp.1, y = Comp.2), color = "blue", size = 3) +
geom_text(data = pca_data, aes(x = Comp.1, y = Comp.2, label = State), hjust = 0, vjust = 0, size = 5) +
geom_segment(data = loading_data, aes(x = 0, y = 0, xend = Comp.1, yend = Comp.2), arrow = arrow(length = unit(0.3, "cm")), color = "red") +
geom_text(data = loading_data, aes(x = Comp.1, y = Comp.2, label = Variable), color = "red", hjust = 0, vjust = 0, size = 5) +
ggtitle("PCA Biplot of USArrests Data") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5))
