print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# 하나씩 변수를 제거하면서 모델을 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
model_no_hp <- lm(mpg ~ disp + wt, data = input)
summary(model_no_hp)
print(model_no_hp)
model_no_wt <- lm(mpg ~ disp + hp, data = input)
summary(model_no_wt)
print(model_no_wt)
# 두 개의 변수만 사용하여 모델을 생성
model_disp_hp <- lm(mpg ~ disp + hp, data = input)
summary(model_disp_hp)
print(model_disp_hp)
model_disp_wt <- lm(mpg ~ disp + wt, data = input)
summary(model_disp_wt)
print(model_disp_wt)
model_hp_wt <- lm(mpg ~ hp + wt, data = input)
summary(model_hp_wt)
print(model_hp_wt)
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# disp 변수를 제거한 모델 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
# 요약 결과를 데이터 프레임으로 변환
summary_no_disp <- summary(model_no_disp)
# 회귀 계수를 데이터 프레임으로 변환
coefficients_no_disp <- as.data.frame(summary_no_disp$coefficients)
colnames(coefficients_no_disp) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
# 결과 출력
print(coefficients_no_disp)
# Disp 변수를 제거한 모델의 요약 결과를 표로 출력
library(knitr)
kable(coefficients_no_disp, caption = "Disp 변수를 제거한 모델의 회귀 계수")
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
install.packages("knitr")
library(corrplot)
library(knitr)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관분석표 생성
cor_matrix <- cor(input)
print(cor_matrix)
# 상관분석표 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# disp 변수를 제거한 모델 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input)
summary(model_no_disp)
print(model_no_disp)
# 요약 결과를 데이터 프레임으로 변환
summary_no_disp <- summary(model_no_disp)
# 회귀 계수를 데이터 프레임으로 변환
coefficients_no_disp <- as.data.frame(summary_no_disp$coefficients)
colnames(coefficients_no_disp) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
# 결과 출력
print(coefficients_no_disp)
# Disp 변수를 제거한 모델의 요약 결과를 표로 출력
kable(coefficients_no_disp, caption = "Disp 변수를 제거한 모델의 회귀 계수")
mtcars
install.packages("corrplot")
library(corrplot)
input <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
input <- mtcars[,c("mpg","disp","hp","wt")]
model <- lm(mpg~disp+hp+wt, data = input)
summary(model)
# 상관 행렬 계산
cor_matrix <- cor(input)
# 상관 행렬 출력
print(cor_matrix)
# 상관 행렬 히트맵 생성
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", number.cex = 0.7)
input2 <- mtcars[,c("mpg","hp","wt")]
model2 <- lm(mpg~hp+wt, data = input2)
summary(model2)
# 상관 행렬 계산
cor_matrix2 <- cor(input2)
# 상관 행렬 출력
print(cor_matrix2)
# 상관 행렬 히트맵 생성
corrplot(cor_matrix2, method = "color", type = "upper",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", number.cex = 0.7)
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("corrplot")
library(corrplot)
# mtcars 데이터셋 로드
data(mtcars)
# 원하는 열 선택
input <- mtcars[, c("mpg", "disp", "hp", "wt")]
# 데이터 프레임 출력
print(head(input))
# 상관 행렬 계산
cor_matrix <- cor(input)
# 상관 행렬 출력
print(cor_matrix)
# 상관 행렬 히트맵 생성
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
# 다중회귀분석 실행 (disp, hp, wt를 사용)
model_full <- lm(mpg ~ disp + hp + wt, data = input)
# 회귀분석 요약 출력
summary(model_full)
# 모델 출력
print(model_full)
# disp 변수를 제거한 데이터셋 선택
input2 <- mtcars[, c("mpg", "hp", "wt")]
# disp 변수를 제거한 모델 생성
model_no_disp <- lm(mpg ~ hp + wt, data = input2)
summary(model_no_disp)
print(model_no_disp)
# 상관 행렬 계산
cor_matrix2 <- cor(input2)
# 상관 행렬 출력
print(cor_matrix2)
# 상관 행렬 히트맵 생성 (첫 번째 히트맵과 동일한 모양으로)
corrplot(cor_matrix2, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("readxl")
install.packages("corrplot")
library(readxl)
library(corrplot)
# 엑셀 파일 경로 설정
file_path <- "C:\\Users\\409-23\\Documents\\DSCOR.xlsx"
# 엑셀 파일 읽기
data <- read_excel(file_path)
# 상관 분석을 위한 수치형 데이터 선택
# 수치형 변수만 포함된 데이터 프레임 생성
numeric_data <- data[sapply(data, is.numeric)]
# 데이터 프레임 출력 (처음 몇 줄)
print(head(numeric_data))
# 상관 행렬 계산
cor_matrix <- cor(numeric_data, use = "complete.obs")
# 상관 행렬 출력
print(cor_matrix)
# 상관 행렬 히트맵 생성
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("readxl")
install.packages("corrplot")
library(readxl)
library(corrplot)
# 엑셀 파일 경로 설정
file_path <- "C:\\Users\\409-23\\Documents\\DSCOR.xlsx"
# 엑셀 파일 읽기
data <- read_excel(file_path)
data
dscorr <- cor(data)
library(corrplot)
corrplot(dscorr, method = "number")
corrplot(dscorr, method = "circle")
corrplot(dscorr, method = "pie")
corrplot(dscorr, method = "ellipse")
install.packages("corrplot")
# 필요한 패키지 설치 및 로드
install.packages("readxl")
install.packages("corrplot")
library(readxl)
library(corrplot)
# 엑셀 파일 경로 설정
file_path <- "C:\\Users\\409-23\\Documents\\DSCOR.xlsx"
# 엑셀 파일 읽기
data <- read_excel("file_path", 1)
data
dscorr <- cor(data)
library(corrplot)
corrplot(dscorr, method = "number")
corrplot(dscorr, method = "circle")
corrplot(dscorr, method = "pie")
corrplot(dscorr, method = "ellipse")
corrplot(dscorr, method = "number")
corrplot(dscorr, method = "circle")
corrplot(dscorr, method = "number")
corrplot(dscorr, method = "circle")
corrplot(dscorr, method = "pie")
corrplot(dscorr, method = "ellipse")
corrplot(dscorr, method = "number")
corrplot(dscorr, method = "circle")
# 패키지 설치 및 로드
install.packages("openxlsx")
library(openxlsx)
# Excel 파일에서 데이터 읽어오기
data <- read.xlsx("C:/Users/409-23/Documents/DSCOR.xlsx", sheet = "Sheet3")
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 패키지 설치 및 로드
install.packages("openxlsx")
library(openxlsx)
# Excel 파일에서 데이터 읽어오기
data <- read.xlsx(""C:\Users\409-23\Pictures\test.txt"")
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 텍스트 파일에서 데이터 읽어오기
data <- read.table("C:/Users/409-23/Documents/test.txt", header=TRUE)
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 텍스트 파일에서 데이터 읽어오기
data <- read.table("C:/Users/409-23/Documents/test.txt", header=TRUE)
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 텍스트 파일에서 데이터 읽어오기
data <- read.table("C:/Users/409-23/Documents/age3.txt", header=TRUE, sep="\t")
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 텍스트 파일에서 데이터 읽어오기
data <- read.table("C:/Users/409-23/Documents/age1.txt", header=TRUE, sep="\t")
# 히스토그램 및 관련 코드
par(mar=c(2, 1, 1, 1))
hist(data$weight[data$gender==1], xlim=c(1500, 4500), ylim=c(0, 12), col="red", border=NA, main="", xlab="", ylab="", axes=F)
hist(data$weight[data$gender==2], density=10, angle=45, add=TRUE, col="green")
axis(1)
abline(v = mean(data$weight[data$gender==1]), lty=3, lwd=1.5, col="red")
abline(v = mean(data$weight[data$gender==2]), lty=1, lwd=1.5, col="green")
legends <- c("여자", "남자")
legend("topright", legend=legends, fill=c("red", "green"), density=c(NA, 20))
# 필요한 패키지 설치
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(multcomp)
# 엑셀 파일 불러오기
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/PlantGrowth.xlsx"
plant_growth <- read_excel(file_path)
# 데이터 확인
head(plant_growth)
# ANOVA 수행
anova_result <- aov(Growth ~ Crop, data = plant_growth)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
# 필요한 패키지 설치
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(multcomp)
# 엑셀 파일 불러오기
file_path <- "C:/Users/409-23/Documents/카카오톡 받은 파일/PlantGrowth.xlsx"
plant_growth <- read_excel(file_path)
# 데이터 확인
head(plant_growth)
# ANOVA 수행
anova_result <- aov(Growth ~ Crop, data = plant_growth)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
# 필요한 패키지 설치
install.packages("tidyverse")
install.packages("car")
install.packages("multcomp")
# 패키지 로드
library(tidyverse)
library(car)
library(multcomp)
# 데이터프레임 생성
data <- data.frame(
weight = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14,
4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69,
6.31, 5.12, 5.54, 5.5, 5.37, 5.29, 4.92, 6.15, 5.8, 5.26),
group = rep(c("C", "T1", "T2"), each = 10)
)
# 데이터 확인
head(data)
# ANOVA 수행
anova_result <- aov(weight ~ group, data = data)
summary(anova_result)
# 사후검정 수행 (Tukey's HSD 테스트)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
print(tukey_result)
# 사후검정 결과 시각화
plot(tukey_result)
